# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'stacked_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import picamera
import time
import threading
from fractions import Fraction
from datetime import datetime
import numpy as np
from PIL import Image
import sys
sys.path.append("./nightsight/")
from inference import inference_GUI


preview_time = 25
img_dir_path = "./out_dir"
img_viewer_dir = "./out_dir"
weights = "./nightsight/checkpoints/state_dict--epoch=30.ckpt"
capture_icon = "./icons/camera_2.png"
gallery_icon = "./icons/gallery.png"
to_camera_icon = "./icons/camera_2.png"
next_img_icon = "./icons/right_arrow.png"
prev_img_icon = "./icons/left_arrow.png"
zoom_in_icon = "./icons/zoom_in.png"
zoom_out_icon = "./icons/zoom_out.png"
img_exnt = ('.jpg')


class Ui_StackedWidget(QtWidgets.QWidget):
    def setupUi(self, StackedWidget):


        StackedWidget.setObjectName("StackedWidget")
        StackedWidget.setGeometry(0,0,800,450)
        #StackedWidget.showMaximized()


        self.PiCamera = QtWidgets.QWidget()
        self.PiCamera.setObjectName("PiCamera")
        self.to_gallery = QtWidgets.QPushButton(self.PiCamera)
        self.to_gallery.setIcon(QtGui.QIcon(gallery_icon))
        self.to_gallery.setIconSize(QtCore.QSize(50,50))
        self.to_gallery.setGeometry(QtCore.QRect(740, 395, 50, 50))
        #self.to_gallery.setObjectName("Gallery")
        self.to_gallery.setStyleSheet("border-radius : 25; border : 1px solid black")

        self.b_preview = QtWidgets.QPushButton(self.PiCamera)
        self.b_preview.setGeometry(QtCore.QRect(200, 395, 120, 50))
        self.b_preview.setObjectName("b_preview")

        self.b_capture = QtWidgets.QPushButton(self.PiCamera)
        self.b_capture.setIcon(QtGui.QIcon(capture_icon))
        self.b_capture.setIconSize(QtCore.QSize(50,50))
        self.b_capture.setGeometry(QtCore.QRect(375, 395, 50, 50))
        #self.b_capture.setObjectName("Capture")
        self.b_capture.setStyleSheet("border-radius : 25; border : 1px solid black")
        
        self.mode = QtWidgets.QSlider(QtCore.Qt.Horizontal, self.PiCamera)
        self.mode.setMaximumWidth(50)
        self.mode.setGeometry(QtCore.QRect(475, 390, 50, 50))
        self.mode.setMinimum(0)
        self.mode.setMaximum(1)
        self.mode.setSliderPosition(0)
        self.mode.valueChanged[int].connect(self.slider_func)
        
        self.mode_l1 = QtWidgets.QLabel("Day",self.PiCamera)
        self.mode_l1.move(460,425)
        self.mode_l1.setStyleSheet("font: bold 17px")
        
        self.mode_l2 = QtWidgets.QLabel("Night",self.PiCamera)
        self.mode_l2.move(520,425)
        self.mode_l2.setStyleSheet("font: bold 17px")
    
        #self.b_imgnight = QtWidgets.QPushButton(self.centralwidget)
        #self.b_imgnight.setGeometry(QtCore.QRect(1170, 970, 161, 51))
        #self.b_imgnight.setObjectName("b_imgnight")
        StackedWidget.addWidget(self.PiCamera)

        
        self.img_viewer = QtWidgets.QWidget()
        self.img_viewer.setObjectName("img_viewer")
        #self.img_view = QtWidgets.QLabel(self.img_viewer)
        #self.img_view.setGeometry(QtCore.QRect(160,20,1600,900))
        #self.img_view.setText("")
        #self.img_view.setPixmap(QtGui.QPixmap("../../Img_viewer/test_images/5.jpg"))
        #self.img_view.setScaledContents(True)
        #self.img_view.setObjectName("img_view")
        self.img_name = QtWidgets.QLabel(self.img_viewer)
        self.img_name.setGeometry(QtCore.QRect(10, 415, 300, 25))
        self.img_name.setAlignment(QtCore.Qt.AlignLeft)
        self.img_name.setObjectName("img_name")
        
        self.img_scrollArea = QtWidgets.QScrollArea(self.img_viewer)
        self.img_scrollArea.setGeometry(QtCore.QRect(40, 5, 720, 400))
        #self.img_scrollArea.setMinimumSize(QtCore.QSize(640, 360))
        self.img_scrollArea.setWidgetResizable(True)
        #self.img_scrollArea.setObjectName("img_scrollArea")

        self.img_scrollAreaContents = QtWidgets.QWidget()
        self.img_scrollAreaContents.setGeometry(QtCore.QRect(0, 0, 710, 394))
        #self.img_scrollAreaContents.setObjectName("img_scrollAreaContents")
        self.img_scrollAreaContents.setSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(710, 394))
        #self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(1920, 1080))
        #self.img_scrollAreaContents.setMaximumSize(QtCore.QSize(9600, 5400))
        
        self.gridLayout = QtWidgets.QGridLayout(self.img_scrollAreaContents)
        #self.gridLayout.setObjectName("gridLayout")
        
        self.img_view = QtWidgets.QLabel(self.img_scrollAreaContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.img_view.sizePolicy().hasHeightForWidth())
        
        self.img_view.setSizePolicy(sizePolicy)
        #self.img_view.setMinimumSize(QtCore.QSize(1280, 720))
        #self.img_view.setText("")
        #self.img_view.setPixmap(QtGui.QPixmap(os.path.join(img_dir_path,self.img_list[self.img_key])))
        self.img_view.setScaledContents(True)
        #self.img_view.setObjectName("img_view")
        self.gridLayout.addWidget(self.img_view, 160, 20, 1, 1)
        self.img_scrollArea.setWidget(self.img_scrollAreaContents)
        
        
        
        self.Previous = QtWidgets.QPushButton(self.img_viewer)
        self.Previous.setIcon(QtGui.QIcon(prev_img_icon))
        self.Previous.setIconSize(QtCore.QSize(30,70))
        self.Previous.setGeometry(QtCore.QRect(5, 175, 30, 70))
        #self.Previous.setObjectName("Previous")
        self.Next = QtWidgets.QPushButton(self.img_viewer)
        self.Next.setIcon(QtGui.QIcon(next_img_icon))
        self.Next.setIconSize(QtCore.QSize(30,70))
        self.Next.setGeometry(QtCore.QRect(765, 175, 30, 70))
        #self.Next.setObjectName("Next")
        self.to_camera = QtWidgets.QPushButton(self.img_viewer)
        self.to_camera.setIcon(QtGui.QIcon(to_camera_icon))
        self.to_camera.setIconSize(QtCore.QSize(40,40))
        self.to_camera.setGeometry(QtCore.QRect(740, 407, 40, 40))
        #self.to_camera.setObjectName("to_camera")
        self.to_camera.setStyleSheet("border-radius : 20; border : 1px solid black")
        
        self.b_zoom_in = QtWidgets.QPushButton(self.img_viewer)
        self.b_zoom_in.setIcon(QtGui.QIcon(zoom_in_icon))
        self.b_zoom_in.setIconSize(QtCore.QSize(45,45))
        self.b_zoom_in.setGeometry(QtCore.QRect(340, 405, 45, 45))
        
        self.b_zoom_out = QtWidgets.QPushButton(self.img_viewer)
        self.b_zoom_out.setIcon(QtGui.QIcon(zoom_out_icon))
        self.b_zoom_out.setIconSize(QtCore.QSize(45,45))
        self.b_zoom_out.setGeometry(QtCore.QRect(410, 405, 45, 45))
        StackedWidget.addWidget(self.img_viewer)

        self.retranslateUi(StackedWidget)
        QtCore.QMetaObject.connectSlotsByName(StackedWidget)
        
        self.camera = None
        self.preview_status = False
        self.camera_status = False
        self.preview_timer = None
        self.night_mode = False
        self.zoom_factor = 1
        #self.zoom_values = [1,1.5,2,3,4,5]

        self.b_capture.clicked.connect(self.capture_img)
        #self.b_imgnight.clicked.connect(self.capture_night)
        self.b_preview.clicked.connect(self.handle_preview)
        self.to_gallery.clicked.connect(self.open_gallery)
        self.to_camera.clicked.connect(self.open_camera_gui)
        self.Previous.clicked.connect(self.previous_img)
        self.Next.clicked.connect(self.next_img)
        self.b_zoom_in.clicked.connect(self.zoom_img)
        self.b_zoom_out.clicked.connect(self.zoom_out_img)
        self.img_scrollArea.installEventFilter(self)
        self.last_time_move = [0,0]
        
    def capture_img(self):
        #print("Day")
        if self.preview_status is False:
            self.preview_start(timer=False)
            time.sleep(5)
        if self.night_mode is True:
            self.camera.exposure_mode = 'off'
            
            img_output = np.empty((480*800*3,),dtype=np.uint8)
            self.camera.capture(img_output,'rgb')
            self.preview_stop()
            img_output = img_output.reshape((480,800,3))
            img_output = img_output[:480,:800,:]
            #file_name = datetime.now().strftime("%Y%m%d-%H%M%S")
            #np.save(os.path.join(img_dir_path,file_name+'.npy'),img_output)
            inference_GUI(weights,img_output,patch_size=64,cycle_size=32,
                          outfile=os.path.join(img_dir_path,datetime.now().strftime("%Y%m%d-%H%M%S")+'.jpg'))
            #Image.fromarray(img_output,"RGB").save(os.path.join(img_dir_path,file_name+'.jpg'))
            del(img_output)
            
        else:
            self.camera.capture(os.path.join(img_dir_path,datetime.now().strftime("%Y%m%d-%H%M%S")+'.jpg'))
            self.preview_stop()
    
    #def night_settings(self):
        #self.cam_set.shutter_speed = 80000
        #self.cam_set.iso = 800
        #self.cam_set.exposure = 'night'
        #framerate=Fraction(1, 6)
        #sensor_mode=3
    
    #def day_settings(self):
    #    print("here")
        
    def handle_preview(self):
        btn = QtWidgets.qApp.focusWidget()
        if btn.text() == "Start Preview":
            btn.setText("Stop Preview")
            #self.b_preview.setText("Stop Preview")
            self.preview_start(timer=True)
        else:
            btn.setText("Start Preview")
            self.preview_timer.cancel()
            self.preview_stop()
            
    
    def preview_start(self,timer=True):
        #print("Preview Started!!!")
        if self.camera_status is False:
            self._start_camera()
        if timer:
            if self.preview_timer is not None:
                if self.preview_timer.isAlive():
                    self.preview_timer.cancel()
            self.preview_timer = threading.Timer(preview_time, self.preview_stop)
            self.preview_timer.daemon = True
            self.preview_timer.start()
        self.preview_status = True
        self.camera.start_preview(fullscreen=False,window=(0,32,800,390),layer=0)
        #sc = pyautogui.screenshot()
        #sc.save('new_sc.png')
        #self.camera.start_preview(layer=0)
        
        #print("Thread status")
        #print(self.preview_timer.isAlive())
        #if self.preview_status is True:
        #   self.preview_stop()
        #self.b_preview.setText("Start Preview")

            
    def preview_stop(self):
        #print("Preview Stopped!!!")
        if (self.camera_status is True):
            self.camera.stop_preview()
        if self.preview_timer is not None:
            if self.preview_timer.isAlive():
                self.preview_timer.cancel()
        self.preview_status = False
        self._stop_camera()
        self.b_preview.setText("Start Preview")
        

    def _start_camera(self):
        self.camera_status = True
        self.camera = picamera.PiCamera()
        if self.night_mode is True:
            self.camera.resolution = (800,480)
            self.camera.framerate = Fraction(10,1)
            self.camera.sensor_mode = 3
            self.camera.iso = 800
            #self.camera.exposure_mode='night'
            self.camera.shutter_speed = 100000
            #print("shutter speed = ",self.camera.exposure_speed)
        
    def _stop_camera(self):
        self.camera.close()
        self.camera_status = False


    def previous_img(self):
        if (self.img_key - 1) >= 0:
            self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(710,394))
            self.b_zoom_in.setEnabled(True)
            self.img_key -= 1
            self.img_view.setPixmap(QtGui.QPixmap(os.path.join(img_viewer_dir,self.img_list[self.img_key])))
            self.img_name.setText(self.img_list[self.img_key])

    def next_img(self):
        if (self.img_key + 1) < self.img_list_len:
            self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(710,394))
            self.b_zoom_in.setEnabled(True)
            self.img_key += 1
            self.img_view.setPixmap(QtGui.QPixmap(os.path.join(img_viewer_dir,self.img_list[self.img_key])))
            self.img_name.setText(self.img_list[self.img_key])
            
    def zoom_img(self):
        
        self.b_zoom_out.setEnabled(True)
        
        if self.zoom_factor < 5 :
            #self.img_scrollAreaContents.setMinimumSize(self.img_scrollAreaContents.size() * self.factor)
            self.zoom_factor += 1
            self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(710,394) * self.zoom_factor)
        if self.zoom_factor == 5:
            self.b_zoom_in.setEnabled(False)
            
        self.img_scrollArea.verticalScrollBar().setValue(
            self.img_scrollArea.verticalScrollBar().maximum()//2)
        self.img_scrollArea.horizontalScrollBar().setValue(
            self.img_scrollArea.horizontalScrollBar().maximum()//2)
        
        #print(self.img_scrollArea.size(),'\n',self.img_view.pixmap().size(),'\n',
        #      self.img_view.size(),'\n', self.img_scrollAreaContents.size().width(),'\n','\n\n')
        
        
    def zoom_out_img(self):
    
        self.b_zoom_in.setEnabled(True)    
        if self.zoom_factor > 1 :
            self.img_scrollAreaContents.setMinimumSize(self.img_scrollAreaContents.size() * ((self.zoom_factor - 1) / self.zoom_factor))
            self.zoom_factor -= 1
        if self.zoom_factor == 1:
            self.b_zoom_out.setEnabled(False)
            
        #self.img_scrollArea.verticalScrollBar().setValue(
        #    (self.img_scrollArea.verticalScrollBar().maximum()//2) -
        #     self.img_scrollArea.verticalScrollBar().singleStep())
        #self.img_scrollArea.horizontalScrollBar().setValue(
        #    (self.img_scrollArea.horizontalScrollBar().maximum()//2) -
        #     self.img_scrollArea.horizontalScrollBar().singleStep())
        
        self.img_scrollArea.verticalScrollBar().setValue(
            self.img_scrollArea.verticalScrollBar().maximum()//4)
        self.img_scrollArea.horizontalScrollBar().setValue(
            self.img_scrollArea.horizontalScrollBar().maximum()//4)
            
    def eventFilter(self, source, event):
        if event.type() == QtCore.QEvent.MouseMove:
            #print(event.pos().y())
            if self.last_time_move == [0,0]:
                self.last_time_move[0] = event.pos().x()
                self.last_time_move[1] = event.pos().y()
            distance_x = self.last_time_move[0] - event.pos().x()
            distance_y = (self.last_time_move)[1] - event.pos().y()
            self.img_scrollArea.horizontalScrollBar().setValue(
                 self.img_scrollArea.horizontalScrollBar().value() + distance_x)
            self.img_scrollArea.verticalScrollBar().setValue(
                 self.img_scrollArea.verticalScrollBar().value() + distance_y)
            self.last_time_move[0] = event.pos().x()
            self.last_time_move[1] = event.pos().y()
            
        elif event.type() == QtCore.QEvent.MouseButtonRelease:
            self.last_time_move = [0,0]
        return QtWidgets.QWidget.eventFilter(self, source, event)


    def open_gallery(self):
        if self.preview_status is True:
            self.preview_stop()
        elif self.camera_status is True:
            self._stop_camera()
        if self.preview_timer is not None:
            if self.preview_timer.isAlive():
                self.preview_timer.cancel()
        self.img_list = [x for x in sorted(os.listdir(img_viewer_dir),reverse=True) if x.endswith(img_exnt)]        
        self.img_key = 0
        self.img_list_len = len(self.img_list)
        StackedWidget.setCurrentIndex(1)
        if self.img_list_len > 0:
            self.img_view.setPixmap(QtGui.QPixmap(os.path.join(img_viewer_dir,self.img_list[self.img_key])))
            self.img_name.setText(self.img_list[self.img_key])
        else:
            self.img_name.setText("NO IMAGES IN GALLERY!!!")

    def open_camera_gui(self):
        self.img_list = None
        self.img_scrollAreaContents.setMinimumSize(QtCore.QSize(710,394))
        self.img_view.clear()
        StackedWidget.setCurrentIndex(0)

    def slider_func(self,value):
        #print(value)
        if value == 0:
            #print("Entered Day mode")
            self.night_mode = False
        else :
            #print("Entered night mode")
            self.night_mode = True
        
        if self.preview_status is True:
            self.preview_stop()
        elif self.camera_status is True:
            self._stop_camera()

    def retranslateUi(self, StackedWidget):
        _translate = QtCore.QCoreApplication.translate
        StackedWidget.setWindowTitle(_translate("StackedWidget", "PiCamera GUI"))
        #self.to_gallery.setText(_translate("StackedWidget", "Gallery"))
        #self.b_capture.setText(_translate("StackedWidget", ""))
        self.b_preview.setText(_translate("StackedWidget", "Start Preview"))
        self.img_name.setText(_translate("StackedWidget", "Image Name"))
        #self.Previous.setText(_translate("StackedWidget", "Previous"))
        #self.Next.setText(_translate("StackedWidget", "Next"))
        #self.to_camera.setText(_translate("StackedWidget", "Camera"))





if __name__ == "__main__":
    import sys
    if not os.path.isdir(img_dir_path):
        os.mkdir(img_dir_path)
    
    app = QtWidgets.QApplication(sys.argv)
    StackedWidget = QtWidgets.QStackedWidget()
    ui = Ui_StackedWidget()
    ui.setupUi(StackedWidget)
    StackedWidget.show()
    sys.exit(app.exec_())
